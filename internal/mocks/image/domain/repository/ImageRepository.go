// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	image_model "github.com/fikrirnurhidayat/booksvc/internal/image/domain/model"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// ImageRepository is an autogenerated mock type for the ImageRepository type
type ImageRepository struct {
	mock.Mock
}

// CreateImage provides a mock function with given fields: ctx, image
func (_m *ImageRepository) CreateImage(ctx context.Context, image image_model.Image) error {
	ret := _m.Called(ctx, image)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, image_model.Image) error); ok {
		r0 = rf(ctx, image)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteImage provides a mock function with given fields: ctx, id
func (_m *ImageRepository) DeleteImage(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetImage provides a mock function with given fields: ctx, id
func (_m *ImageRepository) GetImage(ctx context.Context, id uuid.UUID) (image_model.Image, error) {
	ret := _m.Called(ctx, id)

	var r0 image_model.Image
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) image_model.Image); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(image_model.Image)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchImages provides a mock function with given fields: ctx
func (_m *ImageRepository) SearchImages(ctx context.Context) (image_model.Images, error) {
	ret := _m.Called(ctx)

	var r0 image_model.Images
	if rf, ok := ret.Get(0).(func(context.Context) image_model.Images); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(image_model.Images)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewImageRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewImageRepository creates a new instance of ImageRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewImageRepository(t mockConstructorTestingTNewImageRepository) *ImageRepository {
	mock := &ImageRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

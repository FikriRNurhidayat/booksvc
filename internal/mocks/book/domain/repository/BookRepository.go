// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	book_model "github.com/fikrirnurhidayat/booksvc/internal/book/domain/model"

	context "context"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// BookRepository is an autogenerated mock type for the BookRepository type
type BookRepository struct {
	mock.Mock
}

// DeleteBook provides a mock function with given fields: ctx, id
func (_m *BookRepository) DeleteBook(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetBook provides a mock function with given fields: ctx, id
func (_m *BookRepository) GetBook(ctx context.Context, id uuid.UUID) (book_model.Book, error) {
	ret := _m.Called(ctx, id)

	var r0 book_model.Book
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) book_model.Book); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(book_model.Book)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveBook provides a mock function with given fields: ctx, book
func (_m *BookRepository) SaveBook(ctx context.Context, book book_model.Book) (book_model.Book, error) {
	ret := _m.Called(ctx, book)

	var r0 book_model.Book
	if rf, ok := ret.Get(0).(func(context.Context, book_model.Book) book_model.Book); ok {
		r0 = rf(ctx, book)
	} else {
		r0 = ret.Get(0).(book_model.Book)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, book_model.Book) error); ok {
		r1 = rf(ctx, book)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchBooks provides a mock function with given fields: ctx
func (_m *BookRepository) SearchBooks(ctx context.Context) (book_model.Books, error) {
	ret := _m.Called(ctx)

	var r0 book_model.Books
	if rf, ok := ret.Get(0).(func(context.Context) book_model.Books); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(book_model.Books)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewBookRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewBookRepository creates a new instance of BookRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBookRepository(t mockConstructorTestingTNewBookRepository) *BookRepository {
	mock := &BookRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	multipart "mime/multipart"
)

// ImageService is an autogenerated mock type for the ImageService type
type ImageService struct {
	mock.Mock
}

// Download provides a mock function with given fields: ctx, url
func (_m *ImageService) Download(ctx context.Context, url string) (string, error) {
	ret := _m.Called(ctx, url)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, url)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Upload provides a mock function with given fields: ctx, file
func (_m *ImageService) Upload(ctx context.Context, file *multipart.FileHeader) (string, error) {
	ret := _m.Called(ctx, file)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, *multipart.FileHeader) string); ok {
		r0 = rf(ctx, file)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *multipart.FileHeader) error); ok {
		r1 = rf(ctx, file)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewImageService interface {
	mock.TestingT
	Cleanup(func())
}

// NewImageService creates a new instance of ImageService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewImageService(t mockConstructorTestingTNewImageService) *ImageService {
	mock := &ImageService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
